package main

import (
	"embed"
	"fmt"
	"net/http"

	"github.com/Cacsjep/goxis"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/filesystem"
)

//go:embed index.html
var f embed.FS

//go:embed static/*
var embedDirStatic embed.FS

func main() {
	app, err := goxis.NewApp(&goxis.AppConfiguration{LoadVapixCredentials: true, LoadBasicDeviceInfo: true, RegisterIOChannel: true})
	if err != nil {
		panic(err)
	}
	defer app.Shutdown()

	if err = app.Load(); err != nil {
		panic(err)
	}

	go func() {
		for {
			select {
			case value, ok := <-app.IoEventChannel:
				if !ok {
					fmt.Println("IoEventChannel closed. Exiting goroutine.")
					return
				}
				fmt.Printf("IO Event | %s:%d=%t \n", value.PortTypeName, value.Port, value.State)
			}
		}
	}()

	if err := app.EventHandler.AddBoolTrigger("DayNight"); err != nil {
		panic(err)
	}

	baseUrl := app.ReversProxyUrlFirstEntry()
	fapp := fiber.New()
	fapp.Use(baseUrl, filesystem.New(filesystem.Config{
		Root: http.FS(f),
	}))
	fapp.Use(baseUrl+"/static", filesystem.New(filesystem.Config{
		Root:       http.FS(embedDirStatic),
		PathPrefix: "static",
		Browse:     true,
	}))
	go fapp.Listen("127.0.0.1:2001")
	app.Run()
}
