package clib

/*
#cgo pkg-config: glib-2.0
#include <stdlib.h>
#include <glib.h>
*/
import "C"

// Int wraps a GLib gint type, providing a Go representation for easier handling
// of integers in GLib functions and callbacks.
type Int struct {
	Ptr C.gint // Ptr holds the GLib gint value.
}

// NewInt initializes and returns a new Int instance. This function is useful
// when you need to create an Int to pass to GLib functions or when starting with
// a new GLib integer value.
func NewInt() *Int {
	return &Int{}
}

// ToGolang converts the GLib gint to a native Go int. This method facilitates the
// transfer of numeric values from C to Go, allowing Go programs to work with
// the values returned by GLib functions directly.
func (cs *Int) ToGolang() int {
	return int(cs.Ptr)
}

// Double wraps a GLib gdouble type, offering a Go representation to simplify
// the usage of doubles in GLib functions and callbacks.
type Double struct {
	Ptr C.gdouble // Ptr holds the GLib gdouble value.
}

// NewDouble initializes and returns a new Double instance. Similar to NewInt,
// this function is designed for situations where a Double needs to be created
// for interaction with GLib functions or when working with new GLib double values.
func NewDouble() *Double {
	return &Double{}
}

// ToGolang converts the GLib gdouble to a native Go float64. This method is essential
// for translating numeric values from C to Go, enabling Go programs to utilize
// the floating-point values manipulated or generated by GLib functions.
func (cs *Double) ToGolang() float64 {
	return float64(cs.Ptr)
}

// Uint64 wraps a GLib guint64 type, providing a Go representation to simplify
// interaction with functions that use guint64 values. It's particularly useful
// when working with GLib functions or callbacks that expect or return guint64 values.
type Uint64 struct {
	Ptr C.guint64 // Ptr holds the GLib guint64 value.
}

// NewUint64 initializes and returns a new Uint64 instance. This function is
// useful when a guint64 needs to be created for interaction with GLib functions
// or when working with new GLib guint64 values.
func NewUint64() *Uint64 {
	return &Uint64{}
}

// ToGolang converts the GLib guint64 to a native Go uint64. This method facilitates
// the translation of numeric values from C to Go, allowing Go programs to work
// with the unsigned 64-bit integer values manipulated or generated by GLib functions.
func (cs *Uint64) ToGolang() uint64 {
	return uint64(cs.Ptr)
}

// Int64 wraps a GLib gint64 type, offering a Go representation to simplify
// the usage of 64-bit integers in GLib functions and callbacks.
type Int64 struct {
	Ptr C.gint64 // Ptr holds the GLib gint64 value.
}

// NewInt64 initializes and returns a new Int64 instance. This function is
// designed for situations where an Int64 needs to be created for interaction
// with GLib functions or when working with new GLib gint64 values.
func NewInt64() *Int64 {
	return &Int64{}
}

// ToGolang converts the GLib gint64 to a native Go int64. This method is essential
// for translating numeric values from C to Go, enabling Go programs to utilize
// the 64-bit integer values manipulated or generated by GLib functions.
func (cs *Int64) ToGolang() int64 {
	return int64(cs.Ptr)
}

// Uint32 wraps a GLib guint32 type, providing a Go representation to simplify
// interaction with functions that use guint32 values. It's useful when working
// with GLib functions or callbacks that expect or return guint32 values.
type Uint32 struct {
	Ptr C.guint32 // Ptr holds the GLib guint32 value.
}

// NewUint32 initializes and returns a new Uint32 instance. This function is
// useful for creating a guint32 for interaction with GLib functions or when
// working with new GLib guint32 values.
func NewUint32() *Uint32 {
	return &Uint32{}
}

// ToGolang converts the GLib guint32 to a native Go uint32. This method facilitates
// the translation of numeric values from C to Go, allowing Go programs to work
// with the unsigned 32-bit integer values manipulated or generated by GLib functions.
func (cs *Uint32) ToGolang() uint32 {
	return uint32(cs.Ptr)
}

// Int32 wraps a GLib gint32 type, offering a Go representation to simplify
// the usage of 32-bit integers in GLib functions and callbacks.
type Int32 struct {
	Ptr C.gint32 // Ptr holds the GLib gint32 value.
}

// NewInt32 initializes and returns a new Int32 instance. This function is
// designed for situations where an Int32 needs to be created for interaction
// with GLib functions or when working with new GLib gint32 values.
func NewInt32() *Int32 {
	return &Int32{}
}

// ToGolang converts the GLib gint32 to a native Go int32. This method is essential
// for translating numeric values from C to Go, enabling Go programs to utilize
// the 32-bit integer values manipulated or generated by GLib functions.
func (cs *Int32) ToGolang() int32 {
	return int32(cs.Ptr)
}

// Uint16 wraps a GLib guint16 type, providing a Go representation to simplify
// interaction with functions that use guint16 values. It's particularly useful
// when working with GLib functions or callbacks that expect or return guint16 values.
type Uint16 struct {
	Ptr C.guint16 // Ptr holds the GLib guint16 value.
}

// NewUint16 initializes and returns a new Uint16 instance. This function is
// useful when a guint16 needs to be created for interaction with GLib functions
// or when working with new GLib guint16 values.
func NewUint16() *Uint16 {
	return &Uint16{}
}

// ToGolang converts the GLib guint16 to a native Go uint16. This method facilitates
// the translation of numeric values from C to Go, allowing Go programs to work
// with the unsigned 16-bit integer values manipulated or generated by GLib functions.
func (cs *Uint16) ToGolang() uint16 {
	return uint16(cs.Ptr)
}

// Int16 wraps a GLib gint16 type, offering a Go representation to simplify
// the usage of 16-bit integers in GLib functions and callbacks.
type Int16 struct {
	Ptr C.gint16 // Ptr holds the GLib gint16 value.
}

// NewInt16 initializes and returns a new Int16 instance. This function is
// designed for situations where an Int16 needs to be created for interaction
// with GLib functions or when working with new GLib gint16 values.
func NewInt16() *Int16 {
	return &Int16{}
}

// ToGolang converts the GLib gint16 to a native Go int16. This method is essential
// for translating numeric values from C to Go, enabling Go programs to utilize
// the 16-bit integer values manipulated or generated by GLib functions.
func (cs *Int16) ToGolang() int16 {
	return int16(cs.Ptr)
}
